import{_ as s,c as e,o as i,ax as t}from"./chunks/framework.Bsca31_H.js";const c=JSON.parse('{"title":"Methods","description":"List of exposed datepicker methods","frontmatter":{"lang":"en-US","title":"Methods","description":"List of exposed datepicker methods"},"headers":[],"relativePath":"methods-and-events/methods/index.md","filePath":"methods-and-events/methods/index.md"}'),l={name:"methods-and-events/methods/index.md"};function n(h,a,p,r,o,d){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h1><p>List of available methods that you can call on the datepicker from the external code</p><p>Add a <code>ref</code> to the component, and call the method on that ref</p><details class="details custom-block"><summary>Code Example</summary><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">VueDatePicker</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;datepicker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { DatePickerInstance } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vuepic/vue-datepicker&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> datepicker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DatePickerInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> yourCustomMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (datepicker) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Close the menu programmatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    datepicker.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></details><h2 id="selectdate" tabindex="-1">selectDate <a class="header-anchor" href="#selectdate" aria-label="Permalink to &quot;selectDate&quot;">​</a></h2><p>When called and there is an active selection, it will select that date.</p><h2 id="closemenu" tabindex="-1">closeMenu <a class="header-anchor" href="#closemenu" aria-label="Permalink to &quot;closeMenu&quot;">​</a></h2><p>Closes the datepicker menu</p><h2 id="openmenu" tabindex="-1">openMenu <a class="header-anchor" href="#openmenu" aria-label="Permalink to &quot;openMenu&quot;">​</a></h2><p>Opens the datepicker menu</p><h2 id="clearvalue" tabindex="-1">clearValue <a class="header-anchor" href="#clearvalue" aria-label="Permalink to &quot;clearValue&quot;">​</a></h2><p>Clears the selected value</p><h2 id="updateinternalmodelvalue" tabindex="-1">updateInternalModelValue <a class="header-anchor" href="#updateinternalmodelvalue" aria-label="Permalink to &quot;updateInternalModelValue&quot;">​</a></h2><ul><li>Parameter: <code>Date | Date[]</code></li></ul><p>Modify the internal <code>model-value</code> while the picker is in the open state.</p><h2 id="setmonthyear" tabindex="-1">setMonthYear <a class="header-anchor" href="#setmonthyear" aria-label="Permalink to &quot;setMonthYear&quot;">​</a></h2><ul><li>Parameter: <code>{ month?: number | string; year?: number | string; }</code></li></ul><p>Set calendar month and year programmatically</p><h2 id="onscroll" tabindex="-1">onScroll <a class="header-anchor" href="#onscroll" aria-label="Permalink to &quot;onScroll&quot;">​</a></h2><p>Manually trigger method that is called on window scroll</p><h2 id="parsemodel" tabindex="-1">parseModel <a class="header-anchor" href="#parsemodel" aria-label="Permalink to &quot;parseModel&quot;">​</a></h2><ul><li>Parameter (optional): <a href="/props/general-configuration/#model-value">ModelValue</a></li></ul><p>Calls internal <code>parseExternalModelValue</code> that will replace or reformat text input value and internal model value</p><h2 id="switchview" tabindex="-1">switchView <a class="header-anchor" href="#switchview" aria-label="Permalink to &quot;switchView&quot;">​</a></h2><p>Manually show overlay</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>To close overlay pass <code>&#39;calendar&#39;</code> as parameter</p></div><ul><li>Parameter 1: <code>&#39;month&#39; | &#39;year&#39; | &#39;calendar&#39; | &#39;time&#39;</code></li><li>Parameter 2 (optional): <code>number</code> - instance number in case of multiple calendars</li></ul><p>Type: <code>(view: &#39;month&#39; | &#39;year&#39; | &#39;calendar&#39; | &#39;time&#39;, instance?: number) =&gt; void;</code></p><h2 id="togglemenu" tabindex="-1">toggleMenu <a class="header-anchor" href="#togglemenu" aria-label="Permalink to &quot;toggleMenu&quot;">​</a></h2><p>Manually toggle picker menu</p><h2 id="handleflow" tabindex="-1">handleFlow <a class="header-anchor" href="#handleflow" aria-label="Permalink to &quot;handleFlow&quot;">​</a></h2><p>By default, flow will only trigger on initial picker menu <code>mount</code>. This method triggers flow again, even if the picker is in the open state</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Function supports <code>flowStep</code> parameter to trigger flow from a given step again</p></div><ul><li>Parameter: <code>number</code></li></ul><h2 id="dpwrapmenuref" tabindex="-1">dpWrapMenuRef <a class="header-anchor" href="#dpwrapmenuref" aria-label="Permalink to &quot;dpWrapMenuRef&quot;">​</a></h2><p>This is not a function, but rather access to a ref on a picker menu wrapper This element holds positioning style attribute</p><ul><li>Type: <code>Ref&lt;HTMLElement | null&gt;</code></li><li>Default: <code>null</code></li></ul>`,37)])])}const u=s(l,[["render",n]]);export{c as __pageData,u as default};
